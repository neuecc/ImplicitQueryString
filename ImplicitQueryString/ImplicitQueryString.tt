/*--------------------------------------------------------------------------
 * ImplicitQueryString
 * ver 1.0.0.0 (Feb. 18th, 2012)
 *
 * created and maintained by neuecc <ils@neue.cc - @neuecc on Twitter>
 * licensed under Microsoft Public License(Ms-PL)
 * http://implicitquerystring.codeplex.com/
 *--------------------------------------------------------------------------*/
<#@ template language="C#" #>
<#@ output extension="cs" #>
<#@ assembly Name="System.Core.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Reflection" #>
<#
    var methods = typeof(Convert).GetMethods(BindingFlags.Static | BindingFlags.Public);

    var converters = methods.Where(x => x.Name.StartsWith("To"))
        .Select(x => Regex.Replace(x.Name, "^To", ""))
        .Where(x => !x.StartsWith("Base64") && x != "String")
        .Distinct()
        .ToArray();
#>
using System;
using System.Collections.Generic;
using System.Collections.Specialized;

namespace CodePlex.Web
{
    public static class NameValueCollectionExtensions
    {
        /// <summary>
        /// <para>Parse value to impilicit convert to left basic type(int, long, double, string, datetime, etc...).</para>
        /// <para>If key is not found, left is nullable then return null, else KeyNotFoundException.</para>
        /// </summary>
        /// <param name="source">Collection holder.</param>
        /// <param name="key">Value's key.</param>
        /// <returns>Implicit convertable to basic types(int, long, double, string, datetime, etc...) value.</returns>
        public static ConvertableString ParseValue(this NameValueCollection source, string key)
        {
            return ParseValue(source, key, null);
        }

        /// <summary>
        /// <para>Parse value to impilicit convert to left basic type(int, long, double, string, datetime, etc...).</para>
        /// <para>If key is not found, left is nullable then return null, else KeyNotFoundException.</para>
        /// </summary>
        /// <param name="source">Collection holder.</param>
        /// <param name="key">Value's key.</param>
        /// <param name="converter">Convert string to string before parse.</param>
        /// <returns>Implicit convertable to basic types(int, long, double, string, datetime, etc...) value.</returns>
        public static ConvertableString ParseValue(this NameValueCollection source, string key, Func<string, string> converter)
        {
            var values = source.GetValues(key);
            if (values == null) return new ConvertableString(null);

            var value = values[0];
            return new ConvertableString(converter == null ? value : converter(value));
        }

        /// <summary>
        /// <para>Convert to enum. T must be enum. Enum parsing ignoreCase is false.</para>
        /// <para>If key is not found then throw KeyNotFoundException.</para>
        /// </summary>
        /// <typeparam name="T">Enum</typeparam>
        /// <param name="source">Collection holder.</param>
        /// <param name="key">Value's key.</param>
        /// <returns>Parsed enum.</returns>
        public static T ParseEnum<T>(this NameValueCollection source, string key)
            where T : struct, IComparable, IFormattable, IConvertible
        {
            return ParseEnum<T>(source, key, null, false);
        }

        /// <summary>
        /// <para>Convert to enum. T must be enum. Enum parsing ignoreCase is false.</para>
        /// <para>If key is not found then throw KeyNotFoundException.</para>
        /// </summary>
        /// <typeparam name="T">Enum</typeparam>
        /// <param name="source">Collection holder.</param>
        /// <param name="key">Value's key.</param>
        /// <param name="converter">Convert string to string before parse.</param>
        /// <returns>Parsed enum.</returns>
        public static T ParseEnum<T>(this NameValueCollection source, string key, Func<string, string> converter)
            where T : struct, IComparable, IFormattable, IConvertible
        {
            return ParseEnum<T>(source, key, converter, false);
        }

        /// <summary>
        /// <para>Convert to enum. T must be enum.</para>
        /// <para>If key is not found then throw KeyNotFoundException.</para>
        /// </summary>
        /// <typeparam name="T">Enum</typeparam>
        /// <param name="source">Collection holder.</param>
        /// <param name="key">Value's key. If key is not found then throw KeyNotFoundException.</param>
        /// <param name="ignoreCase">Is ignore allow parse capital or lower case.</param>
        /// <returns>Parsed enum.</returns>
        public static T ParseEnum<T>(this NameValueCollection source, string key, bool ignoreCase)
            where T : struct, IComparable, IFormattable, IConvertible
        {
            return ParseEnum<T>(source, key, null, ignoreCase);
        }

        /// <summary>
        /// <para>Convert to enum. T must be enum.</para>
        /// <para>If key is not found then throw KeyNotFoundException.</para>
        /// </summary>
        /// <typeparam name="T">Enum</typeparam>
        /// <param name="source">Collection holder.</param>
        /// <param name="key">Value's key.</param>
        /// <param name="converter">Convert string to string before parse.</param>
        /// <param name="ignoreCase">Is ignore allow parse capital or lower case.</param>
        /// <returns>Parsed enum.</returns>
        public static T ParseEnum<T>(this NameValueCollection source, string key, Func<string, string> converter, bool ignoreCase)
            where T : struct, IComparable, IFormattable, IConvertible
        {
            var values = source.GetValues(key);
            if (values == null) throw new KeyNotFoundException();

            var value = values[0];
            return (T)Enum.Parse(typeof(T), converter == null ? value : converter(value), ignoreCase);
        }

<# foreach (var converter in converters) { #>
        /// <summary>
        /// <para>Parse value.</para>
        /// <para>If fail parsing or key not found then return defaultValue.</para>
        /// </summary>
        /// <param name="source">Collection holder.</param>
        /// <param name="key">Value's key.</param>
        /// <param name="defaultValue">Returns default value if parsing failed.</param>
        /// <returns>Parsed value or default value.</returns>
        public static <#= converter #> ParseValueOrDefault(this NameValueCollection source, string key, <#= converter #> defaultValue)
        {
            return ParseValueOrDefault(source, key, defaultValue, null);
        }

        /// <summary>
        /// <para>Parse value. If fail parsing or key not found then return defaultValue.</para>
        /// <para>If fail parsing or key not found then return defaultValue.</para>
        /// </summary>
        /// <param name="source">Collection holder.</param>
        /// <param name="key">Value's key.</param>
        /// <param name="defaultValue">Returns default value if parsing failed.</param>
        /// <param name="converter">Convert string to string before parse.</param>
        /// <returns>Parsed value or default value.</returns>
        public static <#= converter #> ParseValueOrDefault(this NameValueCollection source, string key, <#= converter #> defaultValue, Func<string, string> converter)
        {
            var values = source.GetValues(key) ?? new string[0];
            if (values.Length != 0)
            {
                var value = values[0];
                <#= converter #> result;
                if (value != null && <#= converter #>.TryParse(converter == null ? value : converter(value), out result))
                {
                    return result;
                }
                else
                {
                    return defaultValue;
                }
            }

            return defaultValue;
        }

<# } #>
        /// <summary>
        /// <para>Convert to enum. T must be enum. Enum parsing ignoreCase is false.</para>
        /// <para>If fail parsing or key not found then return defaultValue.</para>
        /// </summary>
        /// <typeparam name="T">Enum</typeparam>
        /// <param name="source">Collection holder.</param>
        /// <param name="key">Value's key. If key is not found then throw KeyNotFoundException.</param>
        /// <returns>Parsed enum.</returns>
        public static T ParseEnumOrDefault<T>(this NameValueCollection source, string key)
            where T : struct, IComparable, IFormattable, IConvertible
        {
            return ParseEnumOrDefault(source, key, default(T), null, false);
        }

        /// <summary>
        /// <para>Convert to enum. T must be enum. Enum parsing ignoreCase is false.</para>
        /// <para>If fail parsing or key not found then return defaultValue.</para>
        /// </summary>
        /// <typeparam name="T">Enum</typeparam>
        /// <param name="source">Collection holder.</param>
        /// <param name="key">Value's key. If key is not found then throw KeyNotFoundException.</param>
        /// <param name="defaultValue">Returns default value if parsing failed.</param>
        /// <returns>Parsed enum.</returns>
        public static T ParseEnumOrDefault<T>(this NameValueCollection source, string key, T defaultValue)
            where T : struct, IComparable, IFormattable, IConvertible
        {
            return ParseEnumOrDefault(source, key, defaultValue, null, false);
        }

        /// <summary>
        /// <para>Convert to enum. T must be enum. Enum parsing ignoreCase is false.</para>
        /// <para>If fail parsing or key not found then return defaultValue.</para>
        /// </summary>
        /// <typeparam name="T">Enum</typeparam>
        /// <param name="source">Collection holder.</param>
        /// <param name="key">Value's key. If key is not found then throw KeyNotFoundException.</param>
        /// <param name="defaultValue">Returns default value if parsing failed.</param>
        /// <param name="converter">Convert string to string before parse.</param>
        /// <returns>Parsed enum.</returns>
        public static T ParseEnumOrDefault<T>(this NameValueCollection source, string key, T defaultValue, Func<string, string> converter)
            where T : struct, IComparable, IFormattable, IConvertible
        {
            return ParseEnumOrDefault(source, key, defaultValue, converter, false);
        }

        /// <summary>
        /// <para>Convert to enum. T must be enum.</para>
        /// <para>If fail parsing or key not found then return defaultValue.</para>
        /// </summary>
        /// <typeparam name="T">Enum</typeparam>
        /// <param name="source">Collection holder.</param>
        /// <param name="key">Value's key. If key is not found then throw KeyNotFoundException.</param>
        /// <param name="defaultValue">Returns default value if parsing failed.</param>
        /// <param name="ignoreCase">Is ignore allow parse capital or lower case.</param>
        /// <returns>Parsed enum.</returns>
        public static T ParseEnumOrDefault<T>(this NameValueCollection source, string key, T defaultValue, bool ignoreCase)
            where T : struct, IComparable, IFormattable, IConvertible
        {
            return ParseEnumOrDefault(source, key, defaultValue, null, ignoreCase);
        }

        /// <summary>
        /// <para>Convert to enum. T must be enum.</para>
        /// <para>If fail parsing or key not found then return defaultValue.</para>
        /// </summary>
        /// <typeparam name="T">Enum</typeparam>
        /// <param name="source">Collection holder.</param>
        /// <param name="key">Value's key. If key is not found then throw KeyNotFoundException.</param>
        /// <param name="defaultValue">Returns default value if parsing failed.</param>
        /// <param name="converter">Convert string to string before parse.</param>
        /// <param name="ignoreCase">Is ignore allow parse capital or lower case.</param>
        /// <returns>Parsed enum.</returns>
        public static T ParseEnumOrDefault<T>(this NameValueCollection source, string key, T defaultValue, Func<string, string> converter, bool ignoreCase)
            where T : struct, IComparable, IFormattable, IConvertible
        {
            var values = source.GetValues(key) ?? new string[0];
            if (values.Length != 0)
            {
                var value = values[0];
                T result;
                if (value != null && TryParsePrivate(converter == null ? value : converter(value), ignoreCase, out result))
                {
                    return result;
                }
                else
                {
                    return defaultValue;
                }
            }

            return defaultValue;
        }

        /// <summary>
        /// Is NameValueCollection contains key.
        /// </summary>
        /// <param name="source">Collection.</param>
        /// <param name="key">Key.</param>
        /// <returns>IsContainsKey</returns>
        public static bool ContainsKey(this NameValueCollection source, string key)
        {
            return source.GetValues(key) != null;
        }

        // for .NET 3.5 compatibility
        static bool TryParsePrivate<T>(string value, bool ignoreCase, out T result)
        {
            try
            {
                result = (T)Enum.Parse(typeof(T), value, ignoreCase);
                return true;
            }
            catch
            {
                result = default(T);
                return false;
            }
        }
    }

    /// <summary>
    /// <para>Implicit convertable string. This class is specialized for NameValueCollectionExtensions.</para>
    /// <para>If value is null and convert to struct then throw KeyNotFoundException.</para>
    /// </summary>
    public struct ConvertableString
    {
        readonly string Value;

        public ConvertableString(string value)
        {
            this.Value = value;
        }

<# foreach (var converter in converters) { #>
        public static implicit operator <#= converter #>(ConvertableString self)
        {
            if (self.Value == null) throw new KeyNotFoundException();
            return <#= converter #>.Parse(self.Value);
        }

        public static implicit operator <#= converter #>?(ConvertableString self)
        {
            <#= converter #> value;
            return (self.Value != null && <#= converter #>.TryParse(self.Value, out value))
                ? new Nullable<<#= converter #>>(value)
                : null;
        }

<# } #>
        public static implicit operator String(ConvertableString self)
        {
            return self.Value;
        }

        public override string ToString()
        {
            return Value;
        }
    }
}